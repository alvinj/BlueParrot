Blue Parrot
-----------

Like a parrot, the Blue Parrot is an app that (a) plays sound clips 
and (b) speaks text phrases, and does both of those at random times, 
intermixing them randomly.

You can control the max time between what it says. For instance, if you
specify three minutes, it will speak a quote or play a sound clip at least
once every three minutes. Because it does so randomly, some times it will take 
up to three minutes, some times they'll be just seconds apart, but over time
they should average out to about 90 seconds apart (half of three minutes).

(Note that the code currently only pauses one second between checks. This is
for development/debugging.)

There is no UI on the app yet, but you can run it from the command line like
this:

  $ sbt run

Besides fooling with the source code, the two files you can adjust are in the
testing/ subdirectory. Note that all sound files beneath the root sound file
directory are discovered, so they don't have to all be in one directory.

Sample Sound Files
------------------

I currently have about 500 sound files in my directory. Here are some URLs
where I found some great sound clips:

Firefly
  http://www.moviesoundclips.net/sound.php?id=70
  http://wavs.unclebubby.com/firefly/

Short Circuit
  http://www.moviewavs.com/Movies/Short_Circuit.html
  http://www.dailywav.com/program.php?Program=ShortCircuit
  
Star Trek
  http://www.moviesoundclips.net/sound.php?id=42
  http://trekcore.com/audio/

Star Wars
  http://www.rosswalker.co.uk/star_wars_sounds/
  http://www.wheelon.com/sounds/sounds.htm

Wall-E
  http://www.moviesoundclips.net/sound.php?id=158


Developer Notes
---------------

Referencing GitHub source code projects goes down a nasty black hole pretty quick.

It's not too hard to set up from the command line (initially), but it has these problems:

* You have to run "sbt eclipse" any time you reference any sort of new dependency.
  Then go into Eclipse and do a refresh on your project. This isn't really a
  problem, just something you have to do.

* For Eclipse, for any GitHub project you reference, you have to manually make that
  project into an Eclipse project. You have to find it in ~/.sbt/staging, then *import*
  it as a project. After that, check Build Path > Projects, and hopefully Eclipse will
  be happy

* If you update the source code of a github project, you have to manually clean
  out your ~/.ivy2 and ~/.sbt folders. You may also have to wipe your project's
  $PROJECT/target and $PROJECT/project/target folders.

For instance, when I updated my AppleScript project on GitHub, I couldn't get Eclipse
or SBT to find the new source code. I had to search those two directories for all 
references and delete them. I also rm'd the target/ and project/target/ folders 
inside my project.

Once I did those things, and then ran "sbt run", I could use my new AppleScript
source from GitHub.

--- ECLIPSE

Eclipse still isn't happy, not sure what to do about that ... okay, a 
Project > Clean made Eclipse happy again.


TODO: Research whether the GitHub referencing syntax can eliminate some of
      these problems, such as by making sure I always have the latest 
      version of the source.








